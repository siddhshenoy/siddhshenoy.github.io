{"version":3,"sources":["logo.svg","Components/NavigationComponent.js","Components/LandingPageComponent.js","Components/CardComponent.js","Components/MemoryGameComponent.js","App.js","reportWebVitals.js","index.js"],"names":["NavigationComponent","Navbar","Brand","to","className","Component","LandingPageComponent","props","state","Container","CardComponent","VehicleNumber","SuperOnClickFunc","Hidden","HiddenState","Index","UniqueIndex","TransformValue","cardOnClick","bind","this","prevProps","prevState","setState","Transform","onClick","style","transform","visibility","alt","src","width","height","MemoryGameComponent","CardStates","SelectedCards","GeneratedList","CardMappingList","CardList","RotateStates","IndexList","CardsLocked","TimerTime","GameEnd","GameEndTitle","GameEndReason","Timer","onCardClick","flipCard","unflipCard","BackgroundTimer","generateRandomNumbers","setInterval","clearInterval","listLength","startRange","endRange","list","indices","length","randomNum","Math","round","random","includes","push","shuffledList","shuffleList","i","finalList","finalListStates","mappingList","rotateStates","j","k","shuffleIndices","tempList","clickObject","cardnum","Number","index","array","x","y","splice","This","setTimeout","cardStates","cardList","indexOf","tt","kIdx","align","Nav","Link","href","minutes","floor","seconds","map","object","obj","idx","padding","Modal","show","onHide","hideModal","Header","Title","Body","App","hashType","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1eab775.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import {React, Component} from 'react';\r\nimport { Navbar } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass NavigationComponent extends Component\r\n{\r\n    render() {\r\n        return (\r\n            <Navbar>\r\n                <Navbar.Brand>\r\n                    Siddharth Shenoy's Personal Portfolio\r\n                </Navbar.Brand>\r\n                <Link to={\"/MemoryGame\"} className=\"nav-link\">Memory Game</Link>\r\n                <Link to={\"/VehicleDemo\"} className=\"nav-link\">Vehicle Demo</Link> \r\n            </Navbar>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavigationComponent;","import {React, Component} from 'react'\r\nimport { Container } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport NavigationComponent from './NavigationComponent';\r\n\r\nclass LandingPageComponent extends Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n        };\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <section>\r\n                        Hey this is Siddharth Shenoy, I am an enthusiastic software-engineer from India and also have interest in the world of Computer Graphics and Physics. <br/>\r\n                        \r\n                        Some of my work includes: <br/> <br/>\r\n                        <ol>\r\n                            <li>Creating a UCP (User Control Panel) using React.js and Express.js for SAMP gameserver.</li>\r\n                            <li>Memory game using React.js</li>\r\n                        </ol>\r\n                    </section>  \r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default LandingPageComponent;","import {React,Component} from 'react';\r\nimport '../App.css';\r\nclass CardComponent extends Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n        //console.log(\"Card Props:\");\r\n        //console.log(props);\r\n        this.state = {\r\n                VehicleNumber: props.VehicleNumber,\r\n                SuperOnClickFunc: props.SuperOnClickFunc,\r\n                Hidden: props.HiddenState,\r\n                Index: props.UniqueIndex,\r\n                TransformValue: \"rotateY(0deg)\",\r\n                \r\n        }\r\n        this.cardOnClick = this.cardOnClick.bind(this);\r\n        //console.log(\"Index: \" + this.state.Index);\r\n    }\r\n    cardOnClick() {\r\n        //console.log(\"Card Cliked: %d\", this.state.VehicleNumber);\r\n        this.state.SuperOnClickFunc(\r\n            {\r\n                \"Number\": this.state.VehicleNumber,\r\n                \"Index\": this.state.Index\r\n            }\r\n        );\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.props.HiddenState !== prevState.Hidden) {\r\n            this.setState({ Hidden: this.props.HiddenState});\r\n        }\r\n        if (this.props.Transform !== prevState.TransformValue) {\r\n            this.setState({TransformValue: this.props.Transform});\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className='flip-card' onClick={this.cardOnClick}>\r\n                <div className='flip-card-inner' style={{transform: this.state.TransformValue, visibility: (this.state.Hidden===\"REMOVED\"?\"hidden\":\"visible\")}}>\r\n                    <div className='flip-card-front'>\r\n                        <img alt=\"cardfront\" src={process.env.PUBLIC_URL + '/images/cardfront.png'} style={{width:\"125px\", height: \"75px\"}} />\r\n                    </div>\r\n                    <div className='flip-card-back'>\r\n                        <img alt=\"cardrear\" className=\"flip-card\" src={process.env.PUBLIC_URL  + '/images/Vehicle_' + this.state.VehicleNumber + '.jpg'}  style={{ width: \"125px\", height: \"75px\"}} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CardComponent;","import Button from '@restart/ui/esm/Button';\r\nimport {React, Component} from 'react'\r\nimport { Container, Modal, Nav, Navbar } from 'react-bootstrap';\r\n\r\nimport CardComponent from './CardComponent';\r\nclass MemoryGameComponent extends Component\r\n{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            CardStates : [],\r\n            SelectedCards: [],\r\n            GeneratedList: [],\r\n            CardMappingList: [],\r\n            CardList: [],\r\n            RotateStates: [],\r\n            IndexList: [],\r\n            CardsLocked: false,\r\n            TimerTime: 180,\r\n            GameEnd: false,\r\n            GameEndTitle: \"\",\r\n            GameEndReason: \"\",\r\n            Timer: null\r\n        };\r\n        this.onCardClick = this.onCardClick.bind(this);\r\n        this.flipCard = this.flipCard.bind(this);\r\n        this.unflipCard = this.unflipCard.bind(this);\r\n        this.BackgroundTimer = this.BackgroundTimer.bind(this);\r\n    }\r\n    componentDidMount() {\r\n        //PreRendering Code...\r\n        this.generateRandomNumbers(18, 0, 212);\r\n        this.setState({\r\n            Timer: setInterval(this.BackgroundTimer, 1000, true)\r\n        });\r\n    }\r\n    componentWillUnmount() {\r\n        clearInterval(this.state.Timer);\r\n    }\r\n    //Custom functions\r\n    generateRandomNumbers(listLength, startRange, endRange) {\r\n        let list = [];\r\n        let indices = [];\r\n        while(list.length < listLength) {\r\n            let randomNum = ( Math.round(Math.random() * 1000) % (endRange + 1) ) + startRange;\r\n            if(!list.includes(randomNum)) list.push(randomNum);\r\n        }\r\n    \r\n        let shuffledList = this.shuffleList(list);\r\n        for(let i = 0; i < shuffledList.length; i++) {\r\n            list.push(shuffledList[i]);\r\n            \r\n        }\r\n        for(let i = 0; i < list.length; i++) {\r\n            indices.push(i);\r\n        }\r\n        \r\n        // We'll now arrange the cards in a 6 x 6 manner\r\n        let finalList = [];\r\n        let finalListStates = [];\r\n        let mappingList = [];\r\n        let rotateStates = [];\r\n        let j = 0;\r\n        for(let i = 0; i < 6; i++) {\r\n            finalList.push([]);\r\n            finalListStates.push([]);\r\n            rotateStates.push([]);\r\n            for(let k = 0; k < 6; k++)\r\n            {\r\n                finalList[i].push(list[j]);\r\n                finalListStates[i].push(\"HIDDEN\");\r\n                mappingList.push([list[j], i,k]);\r\n                rotateStates[i].push(\"rotateY(0deg)\");\r\n                j++;\r\n            }\r\n        }\r\n        \r\n        this.setState({\r\n            GeneratedList: finalList,\r\n            CardStates: finalListStates,\r\n            CardMappingList: mappingList,\r\n            CardList: list,\r\n            RotateStates: rotateStates,\r\n            IndexList: indices,\r\n\r\n        })\r\n    }\r\n    shuffleList(list) {\r\n\r\n\t\t//We first create an array which will hold the indices which we will later assign\r\n\t\tlet shuffleIndices = [];\r\n\t\twhile(shuffleIndices.length < list.length) {\r\n\t\t    let random = Math.round(Math.random() * 100) % list.length;\r\n\t\t    if(!shuffleIndices.includes(random)) shuffleIndices.push(random);\r\n\t\t}\r\n\r\n\t\t// We then store the new list in this variable\r\n\t\tlet tempList = [];\r\n\t\tfor(let i = 0; i < shuffleIndices.length; i++) {\r\n\t\t\ttempList[i] = list[ shuffleIndices[i] ];\r\n\t\t}\r\n\t\treturn tempList;\r\n\t}\r\n    flipCard(i, j) {\r\n        let rotateStates = this.state.RotateStates;\r\n        rotateStates[i][j] = \"rotateY(180deg)\";\r\n        this.setState(\r\n            {\r\n                RotateStates: rotateStates\r\n            }\r\n        );\r\n    }\r\n    unflipCard(i, j) {\r\n        let rotateStates = this.state.RotateStates;\r\n        rotateStates[i][j] = \"rotateY(0deg)\";\r\n        this.setState(\r\n            {\r\n                RotateStates: rotateStates\r\n            }\r\n        );\r\n    }\r\n    onCardClick(clickObject) {\r\n        if(this.state.CardsLocked) return;\r\n        let cardnum = clickObject.Number;\r\n        let index = clickObject.Index;\r\n        let array = this.state.SelectedCards;\r\n        let rotateStates = this.state.RotateStates;\r\n\r\n        for(let i = 0; i < this.state.CardMappingList.length; i++) {\r\n            if(this.state.CardMappingList[i][0] === cardnum && this.state.IndexList[i] === index) {\r\n                let x = this.state.CardMappingList[i][1];\r\n                let y = this.state.CardMappingList[i][2];\r\n                rotateStates[x][y] = \"rotateY(180deg)\";\r\n            }\r\n        }\r\n        array.push([cardnum, index]);\r\n        if(array.length > 1) {\r\n            if(array[0][1] === index) {\r\n                array.splice(1, 1);\r\n            }\r\n        }\r\n        this.setState(\r\n            {\r\n                SelectedCards: array,\r\n                RotateStates: rotateStates\r\n            }\r\n        );\r\n        \r\n        if(this.state.SelectedCards.length >= 2) {\r\n            if(this.state.SelectedCards[0][0] !== this.state.SelectedCards[1][0]) {\r\n                this.setState( {\r\n                    CardsLocked: true\r\n                });\r\n                let This = this;\r\n                setTimeout(\r\n                    function() {\r\n                        for(let i = 0; i < This.state.CardMappingList.length; i++) {\r\n                            if(This.state.CardMappingList[i][0] === This.state.SelectedCards[0][0]) {\r\n                                let x = This.state.CardMappingList[i][1];\r\n                                let y = This.state.CardMappingList[i][2];\r\n                                rotateStates[x][y] = \"rotateY(0deg)\";\r\n                            }\r\n                            if(This.state.CardMappingList[i][0] === This.state.SelectedCards[1][0]) {\r\n                                let x = This.state.CardMappingList[i][1];\r\n                                let y = This.state.CardMappingList[i][2];\r\n                                rotateStates[x][y] = \"rotateY(0deg)\";\r\n                            }\r\n                        }\r\n                        //Hide those cards\r\n                        This.setState(\r\n                            {\r\n                                SelectedCards: [],\r\n                                RotateStates: rotateStates,\r\n                                CardsLocked: false\r\n                            }\r\n                        );\r\n                    },\r\n                    1000);\r\n                \r\n            } else { // They match\r\n                let This = this;\r\n                setTimeout(function() {\r\n                    let cardStates = This.state.CardStates;\r\n                \r\n                    let cardList = This.state.CardList;\r\n                    for(let i = 0; i < This.state.CardMappingList.length; i++) {\r\n                        if(This.state.CardMappingList[i][0] === This.state.SelectedCards[0][0]) {\r\n                            let x = This.state.CardMappingList[i][1];\r\n                            let y = This.state.CardMappingList[i][2];\r\n                            if(cardStates[x][y] !== \"REMOVED\") {\r\n                                cardStates[x][y] = \"REMOVED\";\r\n                            }\r\n                        }\r\n                    }\r\n                    cardList.splice(cardList.indexOf(This.state.SelectedCards[0][0]), 1);\r\n                    cardList.splice(cardList.indexOf(This.state.SelectedCards[0][0]), 1); \r\n                    This.setState({\r\n                        SelectedCards: [],\r\n                        CardStates: cardStates\r\n                    });\r\n                    if(cardList.length <= 0) {\r\n                        This.setState({\r\n                            GameEnd: true,\r\n                            GameEndTitle: \"You've won!\",\r\n                            GameEndReason: \"You have won the game, you may restart it by refreshing this page!\"\r\n                        });\r\n                        clearInterval(This.state.Timer);\r\n                    }\r\n                    \r\n                },500)\r\n                \r\n                \r\n            }\r\n        }\r\n    }\r\n    BackgroundTimer() {\r\n        \r\n        let tt = this.state.TimerTime;\r\n        if(tt > 0) {\r\n            tt--;\r\n            this.setState({\r\n                TimerTime: tt\r\n            });\r\n        } else {\r\n            this.setState({\r\n                GameEnd: true,\r\n                GameEndTitle: \"Time's up!\",\r\n                GameEndReason: \"You could not outrun the clock, time's up and you lose the game. You may restart it by refreshing this page!\"\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        let kIdx = -1;\r\n        return (\r\n            <div>\r\n                <Container align=\"center\">\r\n                    <Navbar>\r\n                        <Navbar.Brand>\r\n                            Memory Game - By Siddharth Shenoy\r\n                        </Navbar.Brand>\r\n                        <Nav.Link href=\"#\">{\r\n                            (\r\n                                () => {\r\n                                    let minutes = Math.floor(this.state.TimerTime/60);\r\n                                    let seconds = this.state.TimerTime%60;\r\n                                    if(minutes < 10) { \r\n                                        minutes = \"0\" + minutes;\r\n                                    }\r\n                                    if(seconds < 10) {\r\n                                        seconds = \"0\" + seconds;\r\n                                    }\r\n                                    return minutes + \":\" + seconds;\r\n                                }\r\n                            )()\r\n                            \r\n                        }</Nav.Link>\r\n                    </Navbar>\r\n                    <table>\r\n                        <tbody>\r\n                        {\r\n                            this.state.GeneratedList.map((object, index) => {\r\n                                \r\n                                return (\r\n                                    <tr key={index}>\r\n                                        {\r\n                                            object.map((obj, idx) => {\r\n                                                kIdx++;   \r\n                                                return (\r\n                                                    <td key={idx} style={{width: \"125px\", height: \"75px\", padding: \"5px\"}}>\r\n                                                        <CardComponent VehicleNumber={obj} UniqueIndex={this.state.IndexList[kIdx]} SuperOnClickFunc={this.onCardClick} HiddenState={this.state.CardStates[index][idx]} Transform={this.state.RotateStates[index][idx]}/>\r\n                                                    </td>\r\n                                                )\r\n                                                \r\n                                            })\r\n                                            \r\n                                        }\r\n                                    </tr>\r\n                                );\r\n                            })\r\n                        }\r\n                        </tbody>\r\n                    </table>\r\n                </Container>\r\n                <Modal show={this.state.GameEnd} onHide={this.hideModal}>\r\n                    <Modal.Header >\r\n                        <Modal.Title>{this.state.GameEndTitle}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>{this.state.GameEndReason}</Modal.Body>\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MemoryGameComponent;","import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Container } from 'react-bootstrap';\nimport NavigationComponent from './Components/NavigationComponent';\nimport LandingPageComponent from './Components/LandingPageComponent';\nimport MemoryGameComponent from './Components/MemoryGameComponent';\nimport {HashRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n\t\t  <Router hashType={\"slash\"}>\n\t\t\t<NavigationComponent />\n\t\t\t<Switch>\n\t\t\t\t<Router path={process.env.PUBLIC_URL + \"/MemoryGame\"}>\n\t\t\t\t\t<MemoryGameComponent />\n\t\t\t\t</Router>\n\t\t\t\t<Router path={\"/\"}>\n\t\t\t\t\t<LandingPageComponent />\n\t\t\t\t</Router>\n\t\t\t</Switch>\n\t\t</Router>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}